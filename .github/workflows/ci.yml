name: CI

on:
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:
  base-test:
    name: base test
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.34.1
          args: --timeout=5m0s
      - name: install deps
        run: go mod download
      - name: build
        run: go build .

  redis-test:
    name: redis test
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: ./redis
          version: v1.34.1
          args: --timeout=5m0s
      - name: install deps
        working-directory: ./redis
        run: go mod download
      - name: build
        working-directory: ./redis
        run: go build .

  spanner-test:
    name: spanner test
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: ./spanner
          version: v1.34.1
          args: --timeout=5m0s
      - name: install deps
        working-directory: ./spanner
        run: go mod download
      - name: build
        working-directory: ./spanner
        run: go build .

  integration-test:
    name: integration test
    timeout-minutes: 30
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:5-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:12.3
        env:
          POSTGRES_DB: testdb
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      spanner:
        image: gcr.io/cloud-spanner-emulator/emulator
        ports:
          - "9020:9020"
          - "9010:9010"
    steps:
      - name: checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: checkout
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: install deps
        working-directory: ./.integration
        run: go mod download
      - name: set up gcloud SDK
        uses: google-github-actions/setup-gcloud@master
      - name: setup spanner
        run: |
          gcloud config configurations create emulator
          gcloud config set auth/disable_credentials true
          gcloud config set project local-project
          gcloud config set api_endpoint_overrides/spanner http://localhost:9020/
          gcloud spanner instances create test-instance --config=emulator-config --description="Test Instance" --nodes=1
      - name: test
        working-directory: ./.integration
        run: go test -v ./...
        env:
          SPANNER_EMULATOR_HOST: localhost:9010